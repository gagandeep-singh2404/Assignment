package appointmentplanner;

//TODO

/**
 *
 * @author gagandeepsingh
 */
public final class Day {

    public final static String[] DAYS = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
    public final static Time DAY_START = new Time(8, 30);
    public final static Time DAY_END = new Time(17, 30);
    public final static Time LUNCH_TIME = new Time(12, 30);
    public final static TimeSpan DAY_PART = new TimeSpan(4, 0);
    public final static Appointment LUNCH_BREAK = new Appointment("lunch break", new TimeSpan(1, 0));
    public final static TimeSpan StartAndEnd = new TimeSpan(0, 0); 
    public final static Appointment START_OF_DAY = new Appointment("Start of the Day", StartAndEnd); 
    public final static Appointment END_OF_DAY = new Appointment("End of the Day", StartAndEnd); 
    
    

    private final static Time AFTERNOON_START = new Time(13, 30);
    private Node<Appointment> appointments = null;
    private final int nr;
    

    /**
     * The number of appointments added by the user.
     */
    private int nrOfAppointments;

    private static class Node<E> {

        //TODO: implement a linked list inner class.

        private Node<E> next;
        private E item; 
        
        public Node(E item){
            // head
            this.item = item;
            this.next = null; 
        }
        int sizeOfDummyHeadList(Node<E> list) {
            //TODO: implement a linked list with a dummy head.
            Node<E> newList = list; 
            int counter = 1; 
            
            while (newList != null) {
                newList = next; 
                counter++; 
            }
            
           return counter; 
        }
    }

    /**
     * Creates a Day object with no appointments. A week does not contain a
     * weekend: no appointments on Saturdays or Sundays. Days of the week are
     * numbered as follows: Monday = 1 .. Friday = 5.
     *
     * @param nr day of the week: Monday = 1 .. Sunday = 7.
     */
    public Day(int nr) {
        this.nr = nr;
        LUNCH_BREAK.setStart(LUNCH_TIME);
        this.nrOfAppointments = 0;
        //TODO initialize datastructure for the appointments.
        
        if (nr <= 1 && nr <= 5) {
            this.appointments = new Node<>(LUNCH_BREAK);
            this.nrOfAppointments++;
            this.addAppointment(START_OF_DAY);
            this.addAppointment(END_OF_DAY);
        }
    }

    /**
     * Returns the number of appointments on this day, including the lunch break
     * which is always present.
     *
     * @return Number of appointments on this day!
     */
    public int getNrOfAppointments() {
        return nrOfAppointments;
    }

    // METHODS INTRODUCED IN WEEK 3 OF APPOINTMENT PROJECT
    /**
     * Returns the name of the day in English. So if number of this day is 1,
     * the return value is "Monday" etc.
     *
     * @return String holding name of this day.
     */
    public String getNameOfTheDay() {
        return DAYS[nr - 1];
    }

    /**
     * Checks if an appointment of given duration can be made. Returns true if
     * an appointment can be made, false otherwise.
     *
     * @param duration time length of appointment
     * @return true if there is a gap of at least the size of duration in the
     * planning.
     */
    public boolean canAddAppointmentOfDuration(TimeSpan duration) {
        //TODO
        Time AppStart; 
        Time AppEnd; 
                                                       
        if (duration.getTimeSpanInMinutes() >  DAY_PART.getTimeSpanInMinutes()) {
            return false; 
        }
        
        do {
            
          appointmentStartTime = listOfAppoinments.item.getStart(); 
          
          listOfAppoinments = listOfAppoinments.next; 
        } while (listOfAppoinments != null);
        
        return true; 
        
         
    }


    /**
     * Adds a new appointment to this day. The description of the appointment
     * should be unique for this day. Objective is to insert an appointment in
     * such a way that the list keeps all of its appointments ordered in time.
     * <pre>
     * pre:  The start time of the appointment has been set.<br>
     *       The start time lies outside the time spans of other appointments.
     *       The appointment does not overlap with existing appointments on this day.
     * post: The appointment has been added to this day.
     * </pre> In case the pre-conditions are not fulfilled, the appointment will
     * not be added to this day.
     *
     * @param appointment start time of the appointment has been set in advance
     */
    public void addAppointmentWithStartTimeSet(Appointment appointment) {
        //TODO
    }

    /**
     * Adds a new appointment to this day. The method searches a time gap for an
     * appointment of given duration. This will be done according to the first
     * fit approach. The description of the appointment should be unique for
     * this day. The start time will be set by this method, and the appointment
     * is added to this day. The result is that the list of appointments in this
     * class is ordered in time.
     *
     * @param appointment The appointment that will be added to this day.
     */
    public void addAppointment(Appointment appointment) {
        //TODO
    }

    /**
     * Removes the appointment with the given description.
     *
     * @param description The description of the appointment for which a search
     * has to be done.
     */
    public void removeAppointment(String description) {
        //TODO
    }

    /**
     * Checks if an appointment with given description exists.
     *
     * @param description The description of the appointment for which this
     * method finds out if it exists. Each description is unique for
     * appointments on the same day.
     *
     * @return Returns true if an appointment with given description exists.
     */
    public boolean containsAppointmentWithDescription(String description) {
        //TODO
        return false;
    }

    /**
     * This method finds all start times that are available on this day for an
     * appointment of given duration.
     *
     * @param duration the requested duration for an appointment
     * @return an array of start times on which an appointment can be scheduled
     */
    public Time[] getAvailableStartTimesForAppointmentsOfDuration(TimeSpan duration) {
        //TODO
        return null;
    }

    // METHODS INTRODUCED IN WEEK 4 OF APPOINTMENT PROJECT
    /**
     * This method gives a list of available time gaps on this day. Each time
     * gap holds the available time between appointments, and possibly at the
     * begin and at the end of the day.
     *
     * @return an array of TimeGaps containing all available time slots that are
     * available on this day.
     */
    public TimeGap[] getAvailableTimeGaps() {
        //TODO
        return null;
    }

}
