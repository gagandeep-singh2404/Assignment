/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package basicsort;

import java.util.Comparator;
import sort.Queue;
import sort.Sort;

/**
 *
 * @author gagandeepsingh
 */
public class SelectionSorter<E> implements Sort {

    private Node<E> head = new Node(null);
    private Node<E> tail = new Node(null);
    private final int SIZE;

    private static class Node<E> {

        //TODO: implement a linked list inner class.
        private Node<E> next;
        private Node<E> prev;
        private E item;

        public Node(E item) {
            // head
            this.item = item;
            this.next = null;
        }

        public Node(E item, Node<E> next, Node<E> prev) {
            this.item = item;
            this.prev = prev;
            this.next = next;
        }

    }

    public SelectionSorter(E[] e) {
        head.next = new Node(null);
        SIZE = e.length;

        Node<E> nodeList = head.next;
        Node<E> prev = head;
        for (int i = 0; i < e.length; i++) {

            nodeList = new Node(e[i], this.tail, prev);
            prev.next = nodeList;
            prev = nodeList;

            nodeList = nodeList.next;
        }

    }

    public int getSize() {
        Node<E> nodeList = head.next;
        int counter = 0;
        while (nodeList.next != null) {
            counter++;
//            System.out.println("Prev " + nodeList.prev.item);
//            System.out.println("NodeList " + nodeList.item);
//            System.out.println("Next " + nodeList.next.item);
            nodeList = nodeList.next;

        }
        return counter;
    }

    @Override
    public Queue sort(Comparator comparator) {

        Node<E> tempNode = new Node(null);
        Node<E> min = null;
        E item;

        for (Node<E> i = head.next; i.next != null; i = i.next) {
            // First Minum 
            System.out.println("--------Start of the Loop---------");
            min = i;
            item = i.item;
            System.out.println("item " + item);
            for (Node<E> j = i.next; j.next != null; j = j.next) {

                if (comparator.compare(j.item, min.item) < 0) {

                    min = j;
                    System.out.println("min " + min.item);

                    tempNode = j.prev;
                    System.out.println("TempNode " + tempNode.item);

                } 
            }
            
            
            i.item = min.item;
            System.out.println("-----After the for loop i------\n " +i.item);
            tempNode.next.item = item;
            System.out.println("After the for loop tempNode \n" + tempNode.next.item);

        }

        Node<E> nodeList = head.next;
        Queue q = new Queue();

        while (nodeList.next != null) {

            q.put(nodeList.item);
//            System.out.println("" + nodeList.item);

            nodeList = nodeList.next;
        }
        return q;
    }

}
