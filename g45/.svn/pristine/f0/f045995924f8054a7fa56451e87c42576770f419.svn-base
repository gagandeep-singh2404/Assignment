/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package appointmentplanner;

import appointmentplanner.util.Priority;
import appointmentplanner.util.Queue;
import appointmentplanner.util.Stack;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Ignore;

/**
 *
 * @author gagandeepsingh
 */
public class DayTest {

    public DayTest() {
    }

    @BeforeClass
    public static void setUpClass() {
    }

    @AfterClass
    public static void tearDownClass() {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    // TODO add test methods here.
    // The methods must be annotated with annotation @Test. For example:
    //
//     @Test
//     public void hello() {}
//    @Test
//    public void sizeOfDummyHeadListTest() {
//        Day montag = new Day(1);
//        assertEquals(1, montag.getNrOfAppointments());
//    }
    @Test
    public void canAddAppointmentOfDuration() {

        Day monday = new Day(1);
        TimeSpan meetingHours = new TimeSpan(4, 30);
        assertFalse(monday.canAddAppointmentOfDuration(meetingHours));

    }

    @Test
    public void containsAppointmentWithDescriptionTest() {
        Day monday = new Day(1);
        String description = "lunch break";
        assertTrue(monday.containsAppointmentWithDescription(description));

    }

    @Test
    public void removeAppointmentTest() {
        Day monday = new Day(1);
        String description = "lunch break";
        monday.removeAppointment(description);

        assertFalse(monday.containsAppointmentWithDescription(description));
    }

    // @Ignore
    @Test
    public void removeMultipleTimesAppointmentTest() {
        Day monday = new Day(1);
        Time start = new Time(10, 30);
        Time end = new Time(12, 00);
        int appointmentNumberBefore = monday.getNrOfAppointments();

        Appointment funWithTobias = new Appointment("Netflix and Chill", new TimeSpan(start, end));
        funWithTobias.setStart(start);
        // add firstAppointment 
        monday.addAppointmentWithStartTimeSet(funWithTobias);

        // remove appointment 
        monday.removeAppointment("Netflix and Chill");
        // add second Appointment 
        Appointment funWithLuca = new Appointment("Netflix and", new TimeSpan(new Time(13, 40), new Time(13, 55)));
        funWithLuca.setStart(new Time(13, 40));
        monday.addAppointmentWithStartTimeSet(funWithLuca);
        // remove second Appointment 
        System.out.println(appointmentNumberBefore);
        System.out.println(monday.getNrOfAppointments());
        assertEquals(appointmentNumberBefore + 1, monday.getNrOfAppointments());

        monday.removeAppointment("Netflix and");
        // add third appointment 

        Appointment funWith = new Appointment("Netflix and", new TimeSpan(new Time(10, 30), new Time(10, 35)));
        monday.addAppointment(funWith);

        int appointmentNumberAfter = monday.getNrOfAppointments();
        System.out.println(appointmentNumberAfter);
        assertEquals(appointmentNumberBefore + 1, appointmentNumberAfter);
    }

    // ALl THESE TEST ARE WITH STARTTIME 
    //@Ignore
    @Test
    public void addAppointmentWithStartTimeTest() {
        Day monday = new Day(1);
        Time start = new Time(10, 30);
        Time end = new Time(12, 00);
        // create Appointment and set Start
        Appointment javaCourse = new Appointment("Java Course", new TimeSpan(start, end));
        javaCourse.setStart(start);
        //  add Appointment and get the Counter Before add
        int appointmentNumberBefore = monday.getNrOfAppointments();
        monday.addAppointmentWithStartTimeSet(javaCourse);
        //  look if increase of one 
        assertEquals(appointmentNumberBefore + 1, monday.getNrOfAppointments());

    }

    //@Ignore
    @Test
    public void addAppointmentStartWithoutStartTimeTest() {
        Day monday = new Day(1);
        Time start = new Time(10, 30);
        Time end = new Time(12, 00);
        //  create Appointment and set Start
        Appointment javaCourse = new Appointment("Java Course", new TimeSpan(start, end));
        // add Appointment and get the Counter Before add
        int appointmentNumberBefore = monday.getNrOfAppointments();
        monday.addAppointmentWithStartTimeSet(javaCourse);
        // look if increase of one 
        assertEquals(appointmentNumberBefore, monday.getNrOfAppointments());

    }

    //@Ignore
    @Test
    public void addAppointmentStartDescriptionUniqueTest() {
        Day monday = new Day(1);
        Time start = new Time(10, 30);
        Time end = new Time(12, 00);
        //  create Appointment and set Start
        Appointment funWithTobias = new Appointment("Netflix and Chill", new TimeSpan(start, end));
        funWithTobias.setStart(start);
        // add Appointment and get the Counter Before add
        int appointmentNumberBefore = monday.getNrOfAppointments();
        monday.addAppointmentWithStartTimeSet(funWithTobias);
        // look if increase of one 

        assertEquals(appointmentNumberBefore + 1, monday.getNrOfAppointments());

    }
    //@Ignore

    @Test
    public void notAddAppointmentStartWithSameDescriptionTest() {
        // first Appointment 
        Day monday = new Day(1);
        Time start = new Time(10, 30);
        Time end = new Time(12, 00);

        Appointment funWithTobias = new Appointment("Netflix and Chill", new TimeSpan(start, end));
        funWithTobias.setStart(start);

        monday.addAppointmentWithStartTimeSet(funWithTobias);
        int appointmentNumberBefore = monday.getNrOfAppointments();

        //second Appointment with same Description 
        Appointment funWithLuca = new Appointment("Netflix and Chill", new TimeSpan(new Time(10, 30), new Time(10, 35)));
        funWithLuca.setStart(new Time(10, 30));

        monday.addAppointmentWithStartTimeSet(funWithLuca);
        int appointmentNumberAfter = monday.getNrOfAppointments();

        assertEquals(appointmentNumberBefore, appointmentNumberAfter);
    }

//    @Ignore
    @Test
    public void overFourHoursTimeSpanTest() {
        Day monday = new Day(1);
        Time start = new Time(10, 30);
        Time end = new Time(17, 49); // TimeSpan bigger than 4 hours 

        int appointmentNumberBefore = monday.getNrOfAppointments();
        Appointment funWithTobias = new Appointment("Netflix and Chill", new TimeSpan(start, end));
        funWithTobias.setStart(start);

        monday.addAppointmentWithStartTimeSet(funWithTobias);
        int appointmentNumberAfter = monday.getNrOfAppointments();
        assertEquals(appointmentNumberBefore, appointmentNumberAfter);
    }
//    @Ignore

    @Test
    public void appointmentIsOverLunchbreakStartTest() {
        Day monday = new Day(1);
        Time start = new Time(16, 40);
        Time end = new Time(17, 22); // TimeSpan bigger than 4 hours 

        int appointmentNumberBefore = monday.getNrOfAppointments();
        Appointment funWithTobias = new Appointment("Netflix and Chill", new TimeSpan(start, end));
        funWithTobias.setStart(start);

        monday.addAppointmentWithStartTimeSet(funWithTobias);

        Appointment fun = new Appointment("Netflix", new TimeSpan(new Time(10, 30), new Time(12, 00)));
        fun.setStart(new Time(10, 30));

        monday.addAppointmentWithStartTimeSet(fun);
        int appointmentNumberAfter = monday.getNrOfAppointments();
        TimeGap[] timegaps = monday.getAvailableTimeGaps();

        assertEquals(appointmentNumberBefore + 2, appointmentNumberAfter);

    }
    // @Ignore

    @Test
    public void appointmentIsOverLunchbreakEndTest() {
        Day monday = new Day(1);
        Time start = new Time(10, 30);
        Time end = new Time(13, 49); //  

        int appointmentNumberBefore = monday.getNrOfAppointments();
        Appointment funWithTobias = new Appointment("Netflix and Chill", new TimeSpan(start, end));
        funWithTobias.setStart(start);

        monday.addAppointmentWithStartTimeSet(funWithTobias);
        int appointmentNumberAfter = monday.getNrOfAppointments();
        assertEquals(appointmentNumberBefore, appointmentNumberAfter);

        Appointment app = new Appointment("t", new TimeSpan(0, 10));
        app.setStart(new Time(12, 20));
        monday.addAppointmentWithStartTimeSet(app);

        assertTrue(monday.containsAppointmentWithDescription("t"));

    }

    @Test
    public void getAvailableTimeGapsTest() {

        Appointment app1 = new Appointment("Test one", new TimeSpan(new Time(10, 30), new Time(12, 00)));
        Day monday = new Day(1);

        TimeGap[] result = monday.getAvailableTimeGaps();
        assertEquals(2, result.length);

    }

    //@Ignore
    @Test
    public void getAppointmentOfPriority() {

        Day monday = new Day(1);
        Stack<Appointment> stack = new Stack();
        Appointment one = new Appointment("1", new TimeSpan(0, 20), Priority.MEDIUM);
        Appointment two = new Appointment("2", new TimeSpan(0, 20));
        Appointment three = new Appointment("3", new TimeSpan(0, 20), Priority.MEDIUM);
        Appointment four = new Appointment("4", new TimeSpan(2, 20), Priority.HIGH);
        Appointment five = new Appointment("5", new TimeSpan(0, 20));
        Appointment six = new Appointment("6", new TimeSpan(1, 20), Priority.HIGH);
        Appointment seven = new Appointment("7", new TimeSpan(0, 20));
        Appointment eight = new Appointment("8", new TimeSpan(0, 20));
        Appointment nine = new Appointment("9", new TimeSpan(1, 20));
        Appointment ten = new Appointment("10", new TimeSpan(0, 20));

        monday.addAppointment(one);
        monday.addAppointment(two);
        monday.addAppointment(three);
        monday.addAppointment(four);
        monday.addAppointment(five);
        monday.addAppointment(six);
        monday.addAppointment(seven);
        monday.addAppointment(eight);
        monday.addAppointment(nine);
        monday.addAppointment(ten);

        assertEquals(11, monday.getNrOfAppointments());

        stack = monday.getAppointmentsOfPriority(Priority.LOW);

        assertEquals(7, stack.size());
        assertEquals(two, stack.pop());

        stack = monday.getAppointmentsOfPriority(Priority.MEDIUM);

        assertEquals(2, stack.size());
        assertEquals(one, stack.pop());

        stack = monday.getAppointmentsOfPriority(Priority.HIGH);

        assertEquals(2, stack.size());
        assertEquals(four, stack.pop());

        assertFalse(monday.canAddAppointmentOfDuration(new TimeSpan(3, 0)));
    }

    @Test
    public void nameTest() {
        String[] names = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};

        Day[] days = {new Day(1), new Day(2), new Day(3), new Day(4), new Day(5), new Day(6), new Day(7)};

        for (int i = 0; i < days.length; i++) {
            assertEquals(names[i], days[i].getNameOfTheDay());
        }
    }

    @Test
    public void verifactionTest() {
        Day monday = new Day(1);
        Appointment app = new Appointment("test", new TimeSpan(0, 20));
        app.setStart(new Time(7, 00));
        monday.addAppointmentWithStartTimeSet(app);
        assertFalse(monday.containsAppointmentWithDescription("test"));

        app = new Appointment("test1", new TimeSpan(9, 00));
        app.setStart(new Time(9, 00));
        monday.addAppointmentWithStartTimeSet(app);
        assertFalse(monday.containsAppointmentWithDescription("test1"));

        app = new Appointment(("test4"), new TimeSpan(6, 0));
        monday.addAppointment(app);
        assertFalse(monday.containsAppointmentWithDescription("test4"));

        app = new Appointment("test2", new TimeSpan(0, 20));
        app.setStart(new Time(18, 00));
        assertFalse(monday.containsAppointmentWithDescription("test2"));
        
        app = new Appointment("test5",new TimeSpan(new Time(8, 00),new Time(18, 0)));
        monday.addAppointment(app);
        assertFalse(monday.containsAppointmentWithDescription("test5"));
        
        
        assertFalse(monday.canAddAppointmentOfDuration(new TimeSpan(new Time(8, 00),new Time(18, 0))));

    }

    @Test
    public void testGetAppointments() {
        Day monday = new Day(1);
        Appointment app1 = new Appointment("first", new TimeSpan(1, 20));
        Appointment app2 = new Appointment("third", new TimeSpan(3, 50));
        monday.addAppointment(app1);
        monday.addAppointment(app2);
        Queue<Appointment> appointments = monday.getAppointments();
        assertEquals(3, appointments.getSize());
        assertEquals(app1, appointments.get());
        assertEquals(Day.LUNCH_BREAK, appointments.get());
    }
}
