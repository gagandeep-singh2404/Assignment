package sort;

public final class Queue<T> {

    private int size;
    private Node<T> head;

    private static class Node<T> {

        //TODO: implement a linked list inner class.
        private Node<T> next;
        private T item;

        public Node(T item) {
            // head
            this.item = item;
        }
    }

    public Queue() {
        // dummy head
        this.head = new Node(null);
        size = 0;
    }

    public boolean isEmpty() {
        return this.size == 0;
    }

    public void put(T item) {

        if (this.isEmpty()) {
            head.next = new Node(item);
        }
        if (this.getSize() >= 1) {
            Node<T> lastNode = head;

            while (lastNode.next != null) {
                lastNode = lastNode.next;
            }
            lastNode.next = new Node(item);
        }

        size++;
    }

    public T get() {

        if (this.isEmpty()) {
            return null;
        }

        T firstItem = head.next.item;
        head.next = head.next.next;
        size--;
        return firstItem;

    }

    public void removeAll() {
        head.next = null;
        size = 0;

    }

    public int getSize() {
        return size;
    }
}
