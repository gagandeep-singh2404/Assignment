/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package heapsort;

import basicsort.SuperSort;
import java.util.Comparator;
import java.util.Stack;
import sort.Queue;
import sort.Sort;

/**
 *
 * @author gagandeepsingh
 */
public class HeapSorter<E> implements Sort<E> {

    private Comparator com;
    private Node<E> root;
    private Stack<Node> parentStack = new Stack();
    private Stack<Node> copyStack = new Stack();
    private Queue<E> resultQueue;

    

  

    public class Node<E> {

        //TODO: implement a linked list inner class.
        public Node<E> leftChild;
        public Node<E> rightChild;
        public Node<E> parentNode;
        public E item;

        public Node(E item) {
            this.item = item;
        }

        private void addChildren(Node<E> leftChild, Node<E> rightChild) {
            this.leftChild = leftChild;
            this.rightChild = rightChild;

            this.leftChild.parentNode = this;
            this.rightChild.parentNode = this;
        }

        private void addChild(Node<E> leftChild) {
            this.leftChild = leftChild;
            this.leftChild.parentNode = this;

        }

    }

    public HeapSorter(E[] e) {
        resultQueue = new Queue<>();
        root = buildTree(e);
        createStack();
        
    }

  

    private Node<E> buildTree(E[] e) {
        if (e.length == 0)
            return null;
        root = new Node(e[0]);
        _buildTree(e, root, 1);
        return root;
    }

    /**
     * Here the tree is built with recursion
     *
     * @param e
     * @param parentNode
     * @param leftItem leftItem is the item of the leftChild
     */
    private void _buildTree(E[] e, Node<E> parentNode, int leftItem) {
        int rightItem = leftItem + 1;
        if (leftItem > e.length - 1)
            return;

        if (rightItem > e.length - 1){ parentNode.addChild(new Node (e[leftItem]));
            return;
        }
        
        parentNode.addChildren(new Node(e[leftItem]), new Node(e[rightItem]));

        _buildTree(e, parentNode.leftChild, leftItem * 2 + 1);
        _buildTree(e, parentNode.rightChild, rightItem = rightItem * 2 + 1);
    }

      @Override
    public Queue<E> sort(Comparator comparator) {
        this.com = comparator;
        root = heapify();
        
        printQueue();
        return resultQueue;
    }
    
    
    private Node<E> heapify() {
        while(!parentStack.isEmpty()) _sink(parentStack.pop());
        Node<E> lastNode = getLastNode();
        removeLastNode(lastNode);
        return root;
    }

    private void _sink(Node<E> parentNode) {
        if (parentNode.leftChild == null) return;
        Node<E> min = parentNode.leftChild;
        
        if (parentNode.rightChild != null) {
            if (less(parentNode.rightChild,parentNode.leftChild)) min = parentNode.rightChild; 
        }
    
        if (less(min,parentNode)) exchangeItems(min, parentNode);
       
       // if (min == null) return; 
        
        _sink(min);
    }

    private boolean less(Node<E> n1, Node<E> n2) {
        return com.compare(n1.item, n2.item) < 0;
    }

    private void removeLastNode(Node<E> lastNode) {
        exchangeItems(lastNode,root);
        resultQueue.put(lastNode.item);
         if (lastNode.rightChild == null && lastNode.leftChild != null){ lastNode.leftChild = null; System.out.println("leftItem is now null");}
        if (lastNode.rightChild != null && lastNode.leftChild != null){ lastNode.rightChild = null; System.out.println(" rightitem is now null");}
 
    }

    private void exchangeItems(Node<E> n1, Node<E> n2) {
        E temp = n1.item;
        
        n1.item = n2.item;
        n2.item = temp;

    }

    /**
     * creating two Stacks for the heapifyng of the tree All ParentNodes are
     * safed in there
     */
    public void createStack() {
        Queue<Node> queue = new Queue();

        queue.put(root);
        Node<E> tempNode;

        while (!queue.isEmpty()) {
            tempNode = queue.get();

            if (tempNode.leftChild != null) {
                parentStack.add(tempNode);
                copyStack.add(tempNode);
                queue.put(tempNode.leftChild);
            }

            if (tempNode.rightChild != null)
                queue.put(tempNode.rightChild);
        }
    }

      private Node<E> getLastNode() {
          if (copyStack.isEmpty()) return null; 
          
          if (copyStack.lastElement().leftChild == null) copyStack.pop();
          
        Node<E> tempNode = copyStack.lastElement();
          
          return tempNode; 
    }
      
      
      private void printQueue() {
        
          for (int i = 0; i < resultQueue.getSize(); i++) {
              System.out.println(resultQueue.get());
              
          }
    }
}
